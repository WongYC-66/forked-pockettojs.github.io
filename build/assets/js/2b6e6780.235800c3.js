"use strict";(self.webpackChunkpocketto_docs=self.webpackChunkpocketto_docs||[]).push([[8217],{3801:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var a=n(4848),i=n(8453);const s={sidebar_label:"Data Sharding",title:"Data Sharding",sidebar_position:5},o=void 0,r={id:"data-management/data-sharding",title:"Data Sharding",description:"Introduction",source:"@site/docs/data-management/data-sharding.md",sourceDirName:"data-management",slug:"/data-management/data-sharding",permalink:"/forked-pockettojs.github.io/docs/data-management/data-sharding",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_label:"Data Sharding",title:"Data Sharding",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Data Conflict",permalink:"/forked-pockettojs.github.io/docs/data-management/data-conflict"},next:{title:"Frontend API references"}},d={},c=[{value:"Introduction",id:"introduction",level:3},{value:"Usage - Time Series",id:"usage---time-series",level:3}];function l(e){const t={code:"code",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h3,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsx)(t.p,{children:"Data sharding is a method of partitioning data across multiple servers. It is a technique used to distribute data across multiple servers to improve the performance and scalability of the database. Sharding is a common technique used in distributed databases to improve the performance of the database by distributing the data across multiple servers."}),"\n",(0,a.jsxs)(t.p,{children:["To sharding the model data into different databases, you can declare ",(0,a.jsx)(t.code,{children:"shardingMode"})," in your model."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"import { Model, setMainDatabaseName, ShardingMode } from 'pocketto';\n\nsetMainDatabaseName('master');\n\nclass SalesInvoice extends Model {\n  static dbName = 'master';\n  static collectionName = 'SalesInvoices';\n  static shardingMode = ShardingMode.TimeSeries;\n\n  invoiceNumber!: string;\n  customerName!: string;\n  remarks?: string;\n\n  @HasMany('SalesInvoiceItem')\n  items?: SalesInvoiceItem[];\n\n  get totalAmount() {\n    return this.items?.reduce((total, item) => total + item.amount, 0) ?? 0;\n  }\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"usage---time-series",children:"Usage - Time Series"}),"\n",(0,a.jsxs)(t.p,{children:["To use the time series sharding mode, you can set the ",(0,a.jsx)(t.code,{children:"shardingMode"})," to ",(0,a.jsx)(t.code,{children:"ShardingMode.TimeSeries"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["The database will automatically create a new database for each month when you want to create a instance within the period. The database name will be in the format of ",(0,a.jsx)(t.code,{children:"master-2021-01"}),", ",(0,a.jsx)(t.code,{children:"master-2021-02"}),", ",(0,a.jsx)(t.code,{children:"master-2021-03"}),", and so on."]}),"\n",(0,a.jsxs)(t.p,{children:["You can pass in ",(0,a.jsx)(t.code,{children:"period"})," as the second argument when creating a new instance."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const invoice = await Invoice.create({\n  invoiceNumber: 'INV-2021-01-001',\n  customerName: 'John Doe',\n  remarks: 'This is a test invoice',\n  items: [\n    { description: 'Item 1', quantity: 1, price: 100 },\n    { description: 'Item 2', quantity: 2, price: 200 },\n  ],\n}, '2021-01');\n"})}),"\n",(0,a.jsx)(t.p,{children:"You can manage the data by normal query methods."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const savedInvoice = await Invoice.find(invoice.id);\nsavedInvoice.remarks = 'This is a test invoice updated';\nawait savedInvoice.save();\n"})})]})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var a=n(6540);const i={},s=a.createContext(i);function o(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);