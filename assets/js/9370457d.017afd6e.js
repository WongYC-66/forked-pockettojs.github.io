"use strict";(self.webpackChunkpocketto_docs=self.webpackChunkpocketto_docs||[]).push([[9362],{4966:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var o=s(4848),t=s(8453);const r={sidebar_position:4,title:"Relationship"},a=void 0,l={id:"data-modelling/relationship",title:"Relationship",description:"Introduction",source:"@site/docs/data-modelling/relationship.md",sourceDirName:"data-modelling",slug:"/data-modelling/relationship",permalink:"/docs/data-modelling/relationship",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/data-modelling/relationship.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Relationship"},sidebar:"tutorialSidebar",previous:{title:"ID Generation",permalink:"/docs/data-modelling/id"},next:{title:"Advance: Data Management"}},i={},d=[{value:"Introduction",id:"introduction",level:3},{value:"BelongsTo",id:"belongsto",level:3},{value:"HasOne",id:"hasone",level:3},{value:"HasMany",id:"hasmany",level:3},{value:"BelongsToMany",id:"belongstomany",level:3}];function c(e){const n={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h3,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsx)(n.p,{children:"Pocketto provides a way to define relationships between models. This is useful when you want to define a relationship between two models:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#belongsto",children:"BelongsTo"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#hasone",children:"HasOne"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#hasmany",children:"HasMany"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#belongstomany",children:"BelongsToMany"})}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"belongsto",children:"BelongsTo"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"BelongsTo"})," decorator is used to define a one-to-one relationship between two models. The ",(0,o.jsx)(n.code,{children:"BelongsTo"})," decorator takes the target model as an argument."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { Relational, Model, BelongsTo } from 'pocketto';\n\n@Relational\nexport class User extends Model {\n  profileId!: string;\n\n  @BelongsTo('Profile', 'profileId', 'id')\n  profile!: Profile;\n\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You may query the related model using the ",(0,o.jsx)(n.code,{children:"with"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const user = await User.query().with('profile').find('User1');\nconst profile = user.profile;\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Or, you may query the related model using the ",(0,o.jsx)(n.code,{children:"relationship"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const profile = await User.relationship().profile().find('Profile1');\n"})}),"\n",(0,o.jsx)(n.h3,{id:"hasone",children:"HasOne"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"HasOne"})," decorator is used to define a one-to-one relationship between two models. The ",(0,o.jsx)(n.code,{children:"HasOne"})," decorator takes the target model as an argument."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { Relational, Model, HasOne } from 'pocketto';\n\n@Relational\nexport class Profile extends Model {\n  @HasOne('User')\n  user!: User;\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You may query the related model using the ",(0,o.jsx)(n.code,{children:"with"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const profile = await Profile.query().with('user').find('Profile1');\nconst user = profile.user;\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Or, you may query the related model using the ",(0,o.jsx)(n.code,{children:"relationship"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const user = await Profile.relationship().user().find('User1');\n"})}),"\n",(0,o.jsx)(n.h3,{id:"hasmany",children:"HasMany"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"HasMany"})," decorator is used to define a one-to-many relationship between two models. The ",(0,o.jsx)(n.code,{children:"HasMany"})," decorator takes the target model as an argument."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { Relational, Model, HasMany } from 'pocketto';\n\n@Relational\nexport class User extends Model {\n  @HasMany('Post')\n  posts!: Post[];\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You may query the related model using the ",(0,o.jsx)(n.code,{children:"with"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"\nconst user = await User.query().with('posts').find('User1');\n\nconst posts = user.posts;\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Or, you may query the related model using the ",(0,o.jsx)(n.code,{children:"relationship"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const posts = await User.relationship().posts().find('User1');\n"})}),"\n",(0,o.jsx)(n.h3,{id:"belongstomany",children:"BelongsToMany"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"BelongsToMany"})," decorator is used to define a many-to-many relationship between two models. The ",(0,o.jsx)(n.code,{children:"BelongsToMany"})," decorator takes the pivot model and the target model as arguments."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { Relational, Model, BelongsToMany } from 'pocketto';\n\n@Relational\nexport class User extends Model {\n  @BelongsToMany('UserPost', 'Post')\n  posts!: Post[];\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You may query the related model using the ",(0,o.jsx)(n.code,{children:"with"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const user = await User.query().with('posts').find('User1');\nconst posts = user.posts;\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Or, you may query the related model using the ",(0,o.jsx)(n.code,{children:"relationship"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const posts = await User.relationship().posts().find('User1');\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var o=s(6540);const t={},r=o.createContext(t);function a(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);