"use strict";(self.webpackChunkpocketto_docs=self.webpackChunkpocketto_docs||[]).push([[8363],{724:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var i=t(4848),o=t(8453);const a={sidebar_label:"React Native Hooks",title:"React Native Hooks",sidebar_position:2},s=void 0,c={id:"frontend-api/pocketto-react-native",title:"React Native Hooks",description:"React Hooks API",source:"@site/docs/frontend-api/pocketto-react-native.md",sourceDirName:"frontend-api",slug:"/frontend-api/pocketto-react-native",permalink:"/docs/frontend-api/pocketto-react-native",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"React Native Hooks",title:"React Native Hooks",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"React Hooks",permalink:"/docs/frontend-api/pocketto-react"},next:{title:"Vue Composables",permalink:"/docs/frontend-api/pocketto-vue"}},r={},l=[{value:"React Hooks API",id:"react-hooks-api",level:2},{value:"useRealtimeList",id:"userealtimelist",level:3},{value:"useRealtimeList - Configuration",id:"userealtimelist---configuration",level:3},{value:"useRealtime",id:"userealtime",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"react-hooks-api",children:"React Hooks API"}),"\n",(0,i.jsx)(n.p,{children:"Pocketto provides a set of React hooks to interact with the Pocketto model in React Native."}),"\n",(0,i.jsx)(n.h3,{id:"userealtimelist",children:"useRealtimeList"}),"\n",(0,i.jsxs)(n.p,{children:["By using ",(0,i.jsx)(n.code,{children:"useRealtimeList()"})," hook, the listing will auto retrieve new model when there is new data."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import React, { useEffect } from 'react';\nimport { Pressable, Text, View } from \"react-native\";\nimport { useRoute } from \"@react-navigation/native\";\nimport { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport { useRealtimeList } from 'pocketto-react';\nimport { SalesInvoice } from 'src/models/SalesInvoice.p';\n\nexport function SalesInvoiceList({\n  navigation,\n}: {\n  navigation: NativeStackScreenProps<any>['navigation'];\n}) {\n  const invoices = useRealtimeList(SalesInvoice);\n  \n  return <View>\n    {invoices.map((invoice) => {\n      const onPress = () => {\n        navigation.navigate('SalesInvoicePage', { id: invoice.id });\n      };\n\n      return <Pressable key={invoice.id} onPress={onPress}>\n        <Text>{invoice.number}</Text>\n      </Pressable>;\n    })}\n  </View>;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"userealtimelist---configuration",children:"useRealtimeList - Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["There is also options that you can pass to ",(0,i.jsx)(n.code,{children:"useRealtimeList()"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["animationDelay: Delay in milliseconds to wait your custom animation done. Default: ",(0,i.jsx)(n.code,{children:"1ms"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["condition: A ",(0,i.jsx)(n.a,{href:"/docs/data-modelling/query-builder#complex-queries---callback",children:"query builder"})," condition to filter and sorting the data."]}),"\n",(0,i.jsxs)(n.li,{children:["onItemChange: Callback when the item is changed. After the ",(0,i.jsx)(n.code,{children:"animationDelay"})," is done, it will emit ",(0,i.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["onItemCreate: Callback when the item is created. After the ",(0,i.jsx)(n.code,{children:"animationDelay"})," is done, it will emit ",(0,i.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["onItemUpdate: Callback when the item is updated. After the ",(0,i.jsx)(n.code,{children:"animationDelay"})," is done, it will emit ",(0,i.jsx)(n.code,{children:"undefined"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"export function SalesInvoiceList({\n  navigation,\n}: {\n  navigation: NativeStackScreenProps<any>['navigation'];\n}) {\n  const invoices = useRealtimeList(SalesInvoice, {\n    animationDelay: 2000,\n    condition: (query) => query.where('status', 'draft').orderBy('date', 'desc'),\n    onItemChange: (item) => console.log('Item changed', item),\n    onItemCreate: (item) => console.log('Item created', item),\n    onItemUpdate: (item) => console.log('Item updated', item),\n  });\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"userealtime",children:"useRealtime"}),"\n",(0,i.jsxs)(n.p,{children:["By using ",(0,i.jsx)(n.code,{children:"useRealtime()"})," hook, it will auto reflected the data that have same model id in other opened screen."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import React, { useEffect } from 'react';\nimport { Pressable, Text, View } from \"react-native\";\nimport { useRoute } from \"@react-navigation/native\";\nimport { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport { useRealtime } from 'pocketto-react';\nimport { SalesInvoice } from 'src/models/SalesInvoice.p';\n\nexport function SalesInvoicePage({\n  navigation,\n}: {\n  navigation: NativeStackScreenProps<any>['navigation'];\n}) {\n  const route = useRoute();\n  const { id } = route.params;\n  const [invoice, setInvoice] = useRealtime(SalesInvoice, id);\n\n  return <View>\n    <Text>{invoice?.number}</Text>\n\n    <TextInput value={invoice?.number} onTextChange={(value) => {\n        setInvoice({ ...invoice, number: value });\n    }} />\n\n    {/* trigger save to submit to the database */}\n    <Pressable onPress={() => invoice.save()}>Save</Pressable>\n  </View>;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can use the ",(0,i.jsx)(n.code,{children:"useEffect"})," to listen if the ",(0,i.jsx)(n.code,{children:"model._meta._rev"})," is changed, so you can show some message to user that the data is updated."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"export function SalesInvoicePage({\n  navigation,\n}: {\n  navigation: NativeStackScreenProps<any>['navigation'];\n}) {\n  const [invoice, setInvoice] = useRealtime(SalesInvoice, id);\n\n  const [rev, setRev] = useState('');\n  useEffect(() => {\n    if (invoice._meta._rev !== rev && rev && invoice._meta._rev) {\n      console.log('Data updated');\n    } else {\n      setRev(invoice._meta._rev);\n    }\n  }, [invoice._meta._rev, rev]);\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var i=t(6540);const o={},a=i.createContext(o);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);