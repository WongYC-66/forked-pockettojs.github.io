"use strict";(self.webpackChunkpocketto_docs=self.webpackChunkpocketto_docs||[]).push([[5272],{2040:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var n=t(4848),o=t(8453);const s={sidebar_label:"Data Syncing",title:"Data Syncing",sidebar_position:2},i=void 0,c={id:"data-management/data-syncing",title:"Data Syncing",description:"Introduction",source:"@site/docs/data-management/data-syncing.md",sourceDirName:"data-management",slug:"/data-management/data-syncing",permalink:"/docs/data-management/data-syncing",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/data-management/data-syncing.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Data Syncing",title:"Data Syncing",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Database Manager",permalink:"/docs/data-management/database-manager"},next:{title:"Data Encryption",permalink:"/docs/data-management/encryption"}},r={},d=[{value:"Introduction",id:"introduction",level:3}];function l(a){const e={a:"a",admonition:"admonition",code:"code",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...a.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h3,{id:"introduction",children:"Introduction"}),"\n",(0,n.jsxs)(e.p,{children:["The ",(0,n.jsx)(e.code,{children:"syncDatabases"})," method is used to synchronize the local database with the remote database. This method will fetch the data from the remote database and update the local database."]}),"\n",(0,n.jsx)(e.admonition,{title:"Assumption",type:"info",children:(0,n.jsxs)(e.p,{children:["This tutorial is assumed that you have already connected to a local database via ",(0,n.jsx)(e.a,{href:"/docs/data-management/database-manager",children:"this tutorial"}),"."]})}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-ts",children:"import { DatabaseManager, syncDatabases } from 'pocketto';\n\nasync function syncWithRemote() {\n  const db = DatabaseManager.get('my-database');\n\n  const remoteDb = await DatabaseManager.connect('http://localhost:5984', {\n    dbName: 'remote-database',\n    adapter: 'http',\n    auth: {\n      username: 'admin',\n      password: 'password'\n    },\n  });\n  syncDatabases(remoteDb.config.dbName, localDb.config.dbName);\n  await new Promise((resolve) => {\n    remoteDb.sync(localDb, {\n      live: false,\n      retry: true,\n      continuous: false,\n    }).on(\"complete\", () => {\n      console.log(\"Your local database has been fully synced with your remote database!\");\n      resolve(true);\n    });\n  });\n}\n"})})]})}function m(a={}){const{wrapper:e}={...(0,o.R)(),...a.components};return e?(0,n.jsx)(e,{...a,children:(0,n.jsx)(l,{...a})}):l(a)}},8453:(a,e,t)=>{t.d(e,{R:()=>i,x:()=>c});var n=t(6540);const o={},s=n.createContext(o);function i(a){const e=n.useContext(s);return n.useMemo((function(){return"function"==typeof a?a(e):{...e,...a}}),[e,a])}function c(a){let e;return e=a.disableParentContext?"function"==typeof a.components?a.components(o):a.components||o:i(a.components),n.createElement(s.Provider,{value:e},a.children)}}}]);