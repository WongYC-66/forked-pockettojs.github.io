"use strict";(self.webpackChunkpocketto_docs=self.webpackChunkpocketto_docs||[]).push([[5272],{2040:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var n=a(4848),o=a(8453);const s={sidebar_label:"Data Syncing",title:"Data Syncing",sidebar_position:2},i=void 0,r={id:"data-management/data-syncing",title:"Data Syncing",description:"Introduction",source:"@site/docs/data-management/data-syncing.md",sourceDirName:"data-management",slug:"/data-management/data-syncing",permalink:"/forked-pockettojs.github.io/docs/data-management/data-syncing",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Data Syncing",title:"Data Syncing",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Database Manager",permalink:"/forked-pockettojs.github.io/docs/data-management/database-manager"},next:{title:"Data Encryption",permalink:"/forked-pockettojs.github.io/docs/data-management/encryption"}},c={},d=[{value:"Introduction",id:"introduction",level:3}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h3,{id:"introduction",children:"Introduction"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"syncDatabases"})," method is used to synchronize the local database with the remote database. This method will fetch the data from the remote database and update the local database."]}),"\n",(0,n.jsx)(t.admonition,{title:"Assumption",type:"info",children:(0,n.jsxs)(t.p,{children:["This tutorial is assumed that you have already connected to a local database via ",(0,n.jsx)(t.a,{href:"/forked-pockettojs.github.io/docs/data-management/database-manager",children:"this tutorial"}),"."]})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"import { DatabaseManager, syncDatabases } from 'pocketto';\n\nasync function syncWithRemote() {\n  const db = DatabaseManager.get('my-database');\n\n  const remoteDb = await DatabaseManager.connect('http://localhost:5984', {\n    dbName: 'remote-database',\n    adapter: 'http',\n    auth: {\n      username: 'admin',\n      password: 'password'\n    },\n  });\n  syncDatabases(remoteDb.config.dbName, localDb.config.dbName);\n  await new Promise((resolve) => {\n    remoteDb.sync(localDb, {\n      live: false,\n      retry: true,\n      continuous: false,\n    }).on(\"complete\", () => {\n      console.log(\"Your local database has been fully synced with your remote database!\");\n      resolve(true);\n    });\n  });\n}\n"})})]})}function m(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>r});var n=a(6540);const o={},s=n.createContext(o);function i(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);